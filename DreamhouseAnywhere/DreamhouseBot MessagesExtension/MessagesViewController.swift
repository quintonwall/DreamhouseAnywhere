//
//  MessagesViewController.swift
//  DreamhouseBot MessagesExtension
//
//  Created by Quinton Wall on 3/21/18.
//  Copyright Â© 2018 me.quinton. All rights reserved.
//

import UIKit
import Messages
import DreamhouseKit
import SwiftlySalesforce


class MessagesViewController: MSMessagesAppViewController, UITableViewDataSource,UITableViewDelegate {
    
    private var selectedProperty: Property?
    var properties : [Property] = []

    @IBOutlet weak var tableView: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        tableView.delegate = self
        tableView.dataSource = self
        fetchProperties()
    }
    
    
    func fetchProperties() {
        first {
            PropertyData.shared.getPublicPropertyListings()
            
            }.then {
                (results) -> () in
                self.properties = results
                self.tableView.reloadData()
            }.catch {
                (error) -> () in
                print("error: \(error)")  //todo: handle this better
        }
        
        
    }
    
    
    //MARK: Table and Data
    //MARK: UITableViewDataSource methods
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return properties.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "BotCell", for: indexPath) as! BotPropertyTableCell
        
        
        let property : Property = properties[indexPath.row]
        cell.numBedrooms.text = "\(property.beds)"
        cell.numBathrooms.text = "\(property.baths)"
        cell.titleLabel.text = property.title
        cell.priceLabel.text =  property.price.currencyString()
        cell.propertyImageURLString = property.propertyImageURLString
        return cell
        
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        requestPresentationStyle(.compact)
        tableView.deselectRow(at: indexPath, animated: true)
        
        // let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) as! PropertyTableViewCell
        
        
        let p : Property = properties[indexPath.row]
        if let conversation = activeConversation {
            let messageLayout = MSMessageTemplateLayout()
            messageLayout.caption = "\(p.title!) - \(p.price.currencyString())"
            messageLayout.subcaption = p.description
            
            
            let data = try? Data(contentsOf: URL(string: p.propertyImageURLString)!)
            messageLayout.image = UIImage(data: data!)
            
            let message = MSMessage()
            message.layout = messageLayout
            
            //if var components = URLComponents(string: "http://dreamhouseapp.io") {
            //   components.queryItems
            // }
            
            conversation.insert(message, completionHandler: { (error) in
                if let error = error {
                    print(error)
                }
            })
        }
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    //MARK: Lifecycle
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
